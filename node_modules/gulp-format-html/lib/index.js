"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const through2_1 = __importDefault(require("through2"));
const plugin_error_1 = __importDefault(require("plugin-error"));
const js_beautify_1 = require("js-beautify");
const logger_1 = require("@ntnyq/logger");
const PLUGIN_NAME = `gulp-format-html`;
const DEFAULT_OPTIONS = {
    indent_size: 2,
    inline: [],
    content_unformatted: [`pre`, `textarea`, `script`],
};
const logger = (0, logger_1.createLogger)({
    time: `HH:mm:ss`,
});
const GulpFormatHtml = (options = {}) => {
    options = Object.assign({}, DEFAULT_OPTIONS, options);
    return through2_1.default.obj((file, enc, next) => {
        if (file.isNull())
            return next(null, file);
        const beautify = (buf, _, cb) => {
            var _a;
            try {
                const contents = Buffer.from((0, js_beautify_1.html)((_a = buf === null || buf === void 0 ? void 0 : buf.toString()) !== null && _a !== void 0 ? _a : ``, options));
                if (next === cb) {
                    file.contents = contents;
                    return cb(null, file);
                }
                cb(null, contents);
                next(null, file);
            }
            catch (err) {
                const opts = Object.assign({}, options, { fileName: file.path });
                const error = new plugin_error_1.default(PLUGIN_NAME, err, opts);
                if (next !== cb) {
                    return next(error);
                }
                cb(error);
            }
        };
        if (file.isStream()) {
            file.contents = file.contents.pipe((0, through2_1.default)(beautify));
        }
        else {
            if (options.verbose) {
                logger.info(`${PLUGIN_NAME} is formatting file: ${file.path}`);
            }
            beautify(file.contents, null, next);
        }
    });
};
module.exports = GulpFormatHtml;
